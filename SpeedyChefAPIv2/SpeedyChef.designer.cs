#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SpeedyChefAPIv2
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SpeedyChef")]
	public partial class SpeedyChefDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAgenda(Agenda instance);
    partial void UpdateAgenda(Agenda instance);
    partial void DeleteAgenda(Agenda instance);
    partial void InsertTool(Tool instance);
    partial void UpdateTool(Tool instance);
    partial void DeleteTool(Tool instance);
    partial void InsertAgenda_Meal(Agenda_Meal instance);
    partial void UpdateAgenda_Meal(Agenda_Meal instance);
    partial void DeleteAgenda_Meal(Agenda_Meal instance);
    partial void InsertFood_Item(Food_Item instance);
    partial void UpdateFood_Item(Food_Item instance);
    partial void DeleteFood_Item(Food_Item instance);
    partial void InsertGroup_Member(Group_Member instance);
    partial void UpdateGroup_Member(Group_Member instance);
    partial void DeleteGroup_Member(Group_Member instance);
    partial void InsertGroup_Tool(Group_Tool instance);
    partial void UpdateGroup_Tool(Group_Tool instance);
    partial void DeleteGroup_Tool(Group_Tool instance);
    partial void InsertMeal(Meal instance);
    partial void UpdateMeal(Meal instance);
    partial void DeleteMeal(Meal instance);
    partial void InsertMeal_Recipe(Meal_Recipe instance);
    partial void UpdateMeal_Recipe(Meal_Recipe instance);
    partial void DeleteMeal_Recipe(Meal_Recipe instance);
    partial void InsertMember(Member instance);
    partial void UpdateMember(Member instance);
    partial void DeleteMember(Member instance);
    partial void InsertMember_Allergen(Member_Allergen instance);
    partial void UpdateMember_Allergen(Member_Allergen instance);
    partial void DeleteMember_Allergen(Member_Allergen instance);
    partial void InsertMember_Group(Member_Group instance);
    partial void UpdateMember_Group(Member_Group instance);
    partial void DeleteMember_Group(Member_Group instance);
    partial void InsertRecipe(Recipe instance);
    partial void UpdateRecipe(Recipe instance);
    partial void DeleteRecipe(Recipe instance);
    partial void InsertRecipe_Task(Recipe_Task instance);
    partial void UpdateRecipe_Task(Recipe_Task instance);
    partial void DeleteRecipe_Task(Recipe_Task instance);
    partial void InsertStove(Stove instance);
    partial void UpdateStove(Stove instance);
    partial void DeleteStove(Stove instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertTask_Food_Item(Task_Food_Item instance);
    partial void UpdateTask_Food_Item(Task_Food_Item instance);
    partial void DeleteTask_Food_Item(Task_Food_Item instance);
    #endregion
		
		public SpeedyChefDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SpeedyChefConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SpeedyChefDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SpeedyChefDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SpeedyChefDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SpeedyChefDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Agenda> Agendas
		{
			get
			{
				return this.GetTable<Agenda>();
			}
		}
		
		public System.Data.Linq.Table<Tool> Tools
		{
			get
			{
				return this.GetTable<Tool>();
			}
		}
		
		public System.Data.Linq.Table<Agenda_Meal> Agenda_Meals
		{
			get
			{
				return this.GetTable<Agenda_Meal>();
			}
		}
		
		public System.Data.Linq.Table<Food_Item> Food_Items
		{
			get
			{
				return this.GetTable<Food_Item>();
			}
		}
		
		public System.Data.Linq.Table<Group_Member> Group_Members
		{
			get
			{
				return this.GetTable<Group_Member>();
			}
		}
		
		public System.Data.Linq.Table<Group_Tool> Group_Tools
		{
			get
			{
				return this.GetTable<Group_Tool>();
			}
		}
		
		public System.Data.Linq.Table<Meal> Meals
		{
			get
			{
				return this.GetTable<Meal>();
			}
		}
		
		public System.Data.Linq.Table<Meal_Recipe> Meal_Recipes
		{
			get
			{
				return this.GetTable<Meal_Recipe>();
			}
		}
		
		public System.Data.Linq.Table<Member> Members
		{
			get
			{
				return this.GetTable<Member>();
			}
		}
		
		public System.Data.Linq.Table<Member_Allergen> Member_Allergens
		{
			get
			{
				return this.GetTable<Member_Allergen>();
			}
		}
		
		public System.Data.Linq.Table<Member_Group> Member_Groups
		{
			get
			{
				return this.GetTable<Member_Group>();
			}
		}
		
		public System.Data.Linq.Table<Recipe> Recipes
		{
			get
			{
				return this.GetTable<Recipe>();
			}
		}
		
		public System.Data.Linq.Table<Recipe_Task> Recipe_Tasks
		{
			get
			{
				return this.GetTable<Recipe_Task>();
			}
		}
		
		public System.Data.Linq.Table<Stove> Stoves
		{
			get
			{
				return this.GetTable<Stove>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<Task_Food_Item> Task_Food_Items
		{
			get
			{
				return this.GetTable<Task_Food_Item>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.ADD_Allergy_User")]
		public int ADD_Allergy_User([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(30)")] string user, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string pass, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(50)")] string food)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), user, pass, food);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.AddRecipeToMeal")]
		public int AddRecipeToMeal([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> mealId, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(255)")] string recipeName)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), mealId, recipeName);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GET_Allergens")]
		public ISingleResult<GET_AllergensResult> GET_Allergens()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<GET_AllergensResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GET_Allergens_User")]
		public ISingleResult<GET_Allergens_UserResult> GET_Allergens_User([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(30)")] string user, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string passwd)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), user, passwd);
			return ((ISingleResult<GET_Allergens_UserResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GET_ApplianceInfo")]
		public ISingleResult<GET_ApplianceInfoResult> GET_ApplianceInfo([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(30)")] string user, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string passwd)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), user, passwd);
			return ((ISingleResult<GET_ApplianceInfoResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.Get_Groups")]
		public ISingleResult<Get_GroupsResult> Get_Groups([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(30)")] string userID, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="Password", DbType="NVarChar(225)")] string password)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userID, password);
			return ((ISingleResult<Get_GroupsResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.GetMealForDay")]
		public ISingleResult<GetMealForDayResult> GetMealForDay([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(30)")] string user, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(10)")] string date)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), user, date);
			return ((ISingleResult<GetMealForDayResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.MealNameExists")]
		public int MealNameExists([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(30)")] string user, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(10)")] string date, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string name, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> size, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] ref System.Nullable<int> returnValue)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), user, date, name, size, returnValue);
			returnValue = ((System.Nullable<int>)(result.GetParameterValue(4)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.RemoveMeal")]
		public int RemoveMeal([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string mealName, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(10)")] string date, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(30)")] string user)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), mealName, date, user);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.RemoveRecipesFromMealId")]
		public int RemoveRecipesFromMealId([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> mealId)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), mealId);
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SearchSingleKeyword")]
		public ISingleResult<SearchSingleKeywordResult> SearchSingleKeyword([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(MAX)")] string keyword, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(MAX)")] string ordertype, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(MAX)")] string ascending)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), keyword, ordertype, ascending);
			return ((ISingleResult<SearchSingleKeywordResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.SET_StoveInfo")]
		public void SET_StoveInfo([global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(30)")] string user, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="NVarChar(255)")] string passwd, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> tool, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="Int")] System.Nullable<int> burners, [global::System.Data.Linq.Mapping.ParameterAttribute(DbType="VarChar(50)")] string pwr)
		{
			this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), user, passwd, tool, burners, pwr);
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Agenda")]
	public partial class Agenda : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Agowner;
		
		private System.Nullable<System.DateTime> _Agstartdate;
		
		private System.Nullable<System.DateTime> _Agenddate;
		
		private EntitySet<Agenda_Meal> _Agenda_Meals;
		
		private EntitySet<Agenda_Meal> _Agenda_Meals1;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAgownerChanging(string value);
    partial void OnAgownerChanged();
    partial void OnAgstartdateChanging(System.Nullable<System.DateTime> value);
    partial void OnAgstartdateChanged();
    partial void OnAgenddateChanging(System.Nullable<System.DateTime> value);
    partial void OnAgenddateChanged();
    #endregion
		
		public Agenda()
		{
			this._Agenda_Meals = new EntitySet<Agenda_Meal>(new Action<Agenda_Meal>(this.attach_Agenda_Meals), new Action<Agenda_Meal>(this.detach_Agenda_Meals));
			this._Agenda_Meals1 = new EntitySet<Agenda_Meal>(new Action<Agenda_Meal>(this.attach_Agenda_Meals1), new Action<Agenda_Meal>(this.detach_Agenda_Meals1));
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Agowner", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Agowner
		{
			get
			{
				return this._Agowner;
			}
			set
			{
				if ((this._Agowner != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgownerChanging(value);
					this.SendPropertyChanging();
					this._Agowner = value;
					this.SendPropertyChanged("Agowner");
					this.OnAgownerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Agstartdate", DbType="Date")]
		public System.Nullable<System.DateTime> Agstartdate
		{
			get
			{
				return this._Agstartdate;
			}
			set
			{
				if ((this._Agstartdate != value))
				{
					this.OnAgstartdateChanging(value);
					this.SendPropertyChanging();
					this._Agstartdate = value;
					this.SendPropertyChanged("Agstartdate");
					this.OnAgstartdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Agenddate", DbType="Date")]
		public System.Nullable<System.DateTime> Agenddate
		{
			get
			{
				return this._Agenddate;
			}
			set
			{
				if ((this._Agenddate != value))
				{
					this.OnAgenddateChanging(value);
					this.SendPropertyChanging();
					this._Agenddate = value;
					this.SendPropertyChanged("Agenddate");
					this.OnAgenddateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Agenda_Agenda_Meal", Storage="_Agenda_Meals", ThisKey="Agowner", OtherKey="Agowner")]
		public EntitySet<Agenda_Meal> Agenda_Meals
		{
			get
			{
				return this._Agenda_Meals;
			}
			set
			{
				this._Agenda_Meals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Agenda_Agenda_Meal1", Storage="_Agenda_Meals1", ThisKey="Agowner", OtherKey="Agowner")]
		public EntitySet<Agenda_Meal> Agenda_Meals1
		{
			get
			{
				return this._Agenda_Meals1;
			}
			set
			{
				this._Agenda_Meals1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Agenda", Storage="_Member", ThisKey="Agowner", OtherKey="Memname", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Agenda = null;
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Agenda = this;
						this._Agowner = value.Memname;
					}
					else
					{
						this._Agowner = default(string);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Agenda_Meals(Agenda_Meal entity)
		{
			this.SendPropertyChanging();
			entity.Agenda = this;
		}
		
		private void detach_Agenda_Meals(Agenda_Meal entity)
		{
			this.SendPropertyChanging();
			entity.Agenda = null;
		}
		
		private void attach_Agenda_Meals1(Agenda_Meal entity)
		{
			this.SendPropertyChanging();
			entity.Agenda1 = this;
		}
		
		private void detach_Agenda_Meals1(Agenda_Meal entity)
		{
			this.SendPropertyChanging();
			entity.Agenda1 = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tool")]
	public partial class Tool : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Toolid;
		
		private string _Toolname;
		
		private string _Tooldesc;
		
		private EntitySet<Group_Tool> _Group_Tools;
		
		private EntityRef<Stove> _Stove;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnToolidChanging(int value);
    partial void OnToolidChanged();
    partial void OnToolnameChanging(string value);
    partial void OnToolnameChanged();
    partial void OnTooldescChanging(string value);
    partial void OnTooldescChanged();
    #endregion
		
		public Tool()
		{
			this._Group_Tools = new EntitySet<Group_Tool>(new Action<Group_Tool>(this.attach_Group_Tools), new Action<Group_Tool>(this.detach_Group_Tools));
			this._Stove = default(EntityRef<Stove>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Toolid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Toolid
		{
			get
			{
				return this._Toolid;
			}
			set
			{
				if ((this._Toolid != value))
				{
					this.OnToolidChanging(value);
					this.SendPropertyChanging();
					this._Toolid = value;
					this.SendPropertyChanged("Toolid");
					this.OnToolidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Toolname", DbType="VarChar(50)")]
		public string Toolname
		{
			get
			{
				return this._Toolname;
			}
			set
			{
				if ((this._Toolname != value))
				{
					this.OnToolnameChanging(value);
					this.SendPropertyChanging();
					this._Toolname = value;
					this.SendPropertyChanged("Toolname");
					this.OnToolnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tooldesc", DbType="VarChar(255)")]
		public string Tooldesc
		{
			get
			{
				return this._Tooldesc;
			}
			set
			{
				if ((this._Tooldesc != value))
				{
					this.OnTooldescChanging(value);
					this.SendPropertyChanging();
					this._Tooldesc = value;
					this.SendPropertyChanged("Tooldesc");
					this.OnTooldescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tool_Group_Tool", Storage="_Group_Tools", ThisKey="Toolid", OtherKey="Toolid")]
		public EntitySet<Group_Tool> Group_Tools
		{
			get
			{
				return this._Group_Tools;
			}
			set
			{
				this._Group_Tools.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tool_Stove", Storage="_Stove", ThisKey="Toolid", OtherKey="Toolid", IsUnique=true, IsForeignKey=false)]
		public Stove Stove
		{
			get
			{
				return this._Stove.Entity;
			}
			set
			{
				Stove previousValue = this._Stove.Entity;
				if (((previousValue != value) 
							|| (this._Stove.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Stove.Entity = null;
						previousValue.Tool = null;
					}
					this._Stove.Entity = value;
					if ((value != null))
					{
						value.Tool = this;
					}
					this.SendPropertyChanged("Stove");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Group_Tools(Group_Tool entity)
		{
			this.SendPropertyChanging();
			entity.Tool = this;
		}
		
		private void detach_Group_Tools(Group_Tool entity)
		{
			this.SendPropertyChanging();
			entity.Tool = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Agenda_Meals")]
	public partial class Agenda_Meal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Mealid;
		
		private string _Agowner;
		
		private EntityRef<Agenda> _Agenda;
		
		private EntityRef<Agenda> _Agenda1;
		
		private EntityRef<Meal> _Meal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMealidChanging(int value);
    partial void OnMealidChanged();
    partial void OnAgownerChanging(string value);
    partial void OnAgownerChanged();
    #endregion
		
		public Agenda_Meal()
		{
			this._Agenda = default(EntityRef<Agenda>);
			this._Agenda1 = default(EntityRef<Agenda>);
			this._Meal = default(EntityRef<Meal>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mealid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Mealid
		{
			get
			{
				return this._Mealid;
			}
			set
			{
				if ((this._Mealid != value))
				{
					if (this._Meal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMealidChanging(value);
					this.SendPropertyChanging();
					this._Mealid = value;
					this.SendPropertyChanged("Mealid");
					this.OnMealidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Agowner", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Agowner
		{
			get
			{
				return this._Agowner;
			}
			set
			{
				if ((this._Agowner != value))
				{
					if ((this._Agenda.HasLoadedOrAssignedValue || this._Agenda1.HasLoadedOrAssignedValue))
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgownerChanging(value);
					this.SendPropertyChanging();
					this._Agowner = value;
					this.SendPropertyChanged("Agowner");
					this.OnAgownerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Agenda_Agenda_Meal", Storage="_Agenda", ThisKey="Agowner", OtherKey="Agowner", IsForeignKey=true)]
		public Agenda Agenda
		{
			get
			{
				return this._Agenda.Entity;
			}
			set
			{
				Agenda previousValue = this._Agenda.Entity;
				if (((previousValue != value) 
							|| (this._Agenda.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Agenda.Entity = null;
						previousValue.Agenda_Meals.Remove(this);
					}
					this._Agenda.Entity = value;
					if ((value != null))
					{
						value.Agenda_Meals.Add(this);
						this._Agowner = value.Agowner;
					}
					else
					{
						this._Agowner = default(string);
					}
					this.SendPropertyChanged("Agenda");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Agenda_Agenda_Meal1", Storage="_Agenda1", ThisKey="Agowner", OtherKey="Agowner", IsForeignKey=true)]
		public Agenda Agenda1
		{
			get
			{
				return this._Agenda1.Entity;
			}
			set
			{
				Agenda previousValue = this._Agenda1.Entity;
				if (((previousValue != value) 
							|| (this._Agenda1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Agenda1.Entity = null;
						previousValue.Agenda_Meals1.Remove(this);
					}
					this._Agenda1.Entity = value;
					if ((value != null))
					{
						value.Agenda_Meals1.Add(this);
						this._Agowner = value.Agowner;
					}
					else
					{
						this._Agowner = default(string);
					}
					this.SendPropertyChanged("Agenda1");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meal_Agenda_Meal", Storage="_Meal", ThisKey="Mealid", OtherKey="Mealid", IsForeignKey=true)]
		public Meal Meal
		{
			get
			{
				return this._Meal.Entity;
			}
			set
			{
				Meal previousValue = this._Meal.Entity;
				if (((previousValue != value) 
							|| (this._Meal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Meal.Entity = null;
						previousValue.Agenda_Meals.Remove(this);
					}
					this._Meal.Entity = value;
					if ((value != null))
					{
						value.Agenda_Meals.Add(this);
						this._Mealid = value.Mealid;
					}
					else
					{
						this._Mealid = default(int);
					}
					this.SendPropertyChanged("Meal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Food_Item")]
	public partial class Food_Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Foodname;
		
		private EntitySet<Member_Allergen> _Member_Allergens;
		
		private EntitySet<Member_Allergen> _Member_Allergens1;
		
		private EntitySet<Task_Food_Item> _Task_Food_Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFoodnameChanging(string value);
    partial void OnFoodnameChanged();
    #endregion
		
		public Food_Item()
		{
			this._Member_Allergens = new EntitySet<Member_Allergen>(new Action<Member_Allergen>(this.attach_Member_Allergens), new Action<Member_Allergen>(this.detach_Member_Allergens));
			this._Member_Allergens1 = new EntitySet<Member_Allergen>(new Action<Member_Allergen>(this.attach_Member_Allergens1), new Action<Member_Allergen>(this.detach_Member_Allergens1));
			this._Task_Food_Items = new EntitySet<Task_Food_Item>(new Action<Task_Food_Item>(this.attach_Task_Food_Items), new Action<Task_Food_Item>(this.detach_Task_Food_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Foodname", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Foodname
		{
			get
			{
				return this._Foodname;
			}
			set
			{
				if ((this._Foodname != value))
				{
					this.OnFoodnameChanging(value);
					this.SendPropertyChanging();
					this._Foodname = value;
					this.SendPropertyChanged("Foodname");
					this.OnFoodnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_Item_Member_Allergen", Storage="_Member_Allergens", ThisKey="Foodname", OtherKey="Foodname")]
		public EntitySet<Member_Allergen> Member_Allergens
		{
			get
			{
				return this._Member_Allergens;
			}
			set
			{
				this._Member_Allergens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_Item_Member_Allergen1", Storage="_Member_Allergens1", ThisKey="Foodname", OtherKey="Substitution")]
		public EntitySet<Member_Allergen> Member_Allergens1
		{
			get
			{
				return this._Member_Allergens1;
			}
			set
			{
				this._Member_Allergens1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_Item_Task_Food_Item", Storage="_Task_Food_Items", ThisKey="Foodname", OtherKey="Foodname")]
		public EntitySet<Task_Food_Item> Task_Food_Items
		{
			get
			{
				return this._Task_Food_Items;
			}
			set
			{
				this._Task_Food_Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Member_Allergens(Member_Allergen entity)
		{
			this.SendPropertyChanging();
			entity.Food_Item = this;
		}
		
		private void detach_Member_Allergens(Member_Allergen entity)
		{
			this.SendPropertyChanging();
			entity.Food_Item = null;
		}
		
		private void attach_Member_Allergens1(Member_Allergen entity)
		{
			this.SendPropertyChanging();
			entity.Food_Item1 = this;
		}
		
		private void detach_Member_Allergens1(Member_Allergen entity)
		{
			this.SendPropertyChanging();
			entity.Food_Item1 = null;
		}
		
		private void attach_Task_Food_Items(Task_Food_Item entity)
		{
			this.SendPropertyChanging();
			entity.Food_Item = this;
		}
		
		private void detach_Task_Food_Items(Task_Food_Item entity)
		{
			this.SendPropertyChanging();
			entity.Food_Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Group_Member")]
	public partial class Group_Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Memname;
		
		private int _Groupid;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemnameChanging(string value);
    partial void OnMemnameChanged();
    partial void OnGroupidChanging(int value);
    partial void OnGroupidChanged();
    #endregion
		
		public Group_Member()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Memname", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Memname
		{
			get
			{
				return this._Memname;
			}
			set
			{
				if ((this._Memname != value))
				{
					this.OnMemnameChanging(value);
					this.SendPropertyChanging();
					this._Memname = value;
					this.SendPropertyChanged("Memname");
					this.OnMemnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Groupid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Groupid
		{
			get
			{
				return this._Groupid;
			}
			set
			{
				if ((this._Groupid != value))
				{
					this.OnGroupidChanging(value);
					this.SendPropertyChanging();
					this._Groupid = value;
					this.SendPropertyChanged("Groupid");
					this.OnGroupidChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Group_Tool")]
	public partial class Group_Tool : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Toolid;
		
		private int _Groupid;
		
		private EntityRef<Tool> _Tool;
		
		private EntityRef<Member_Group> _Member_Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnToolidChanging(int value);
    partial void OnToolidChanged();
    partial void OnGroupidChanging(int value);
    partial void OnGroupidChanged();
    #endregion
		
		public Group_Tool()
		{
			this._Tool = default(EntityRef<Tool>);
			this._Member_Group = default(EntityRef<Member_Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Toolid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Toolid
		{
			get
			{
				return this._Toolid;
			}
			set
			{
				if ((this._Toolid != value))
				{
					if (this._Tool.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToolidChanging(value);
					this.SendPropertyChanging();
					this._Toolid = value;
					this.SendPropertyChanged("Toolid");
					this.OnToolidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Groupid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Groupid
		{
			get
			{
				return this._Groupid;
			}
			set
			{
				if ((this._Groupid != value))
				{
					if (this._Member_Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupidChanging(value);
					this.SendPropertyChanging();
					this._Groupid = value;
					this.SendPropertyChanged("Groupid");
					this.OnGroupidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tool_Group_Tool", Storage="_Tool", ThisKey="Toolid", OtherKey="Toolid", IsForeignKey=true)]
		public Tool Tool
		{
			get
			{
				return this._Tool.Entity;
			}
			set
			{
				Tool previousValue = this._Tool.Entity;
				if (((previousValue != value) 
							|| (this._Tool.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tool.Entity = null;
						previousValue.Group_Tools.Remove(this);
					}
					this._Tool.Entity = value;
					if ((value != null))
					{
						value.Group_Tools.Add(this);
						this._Toolid = value.Toolid;
					}
					else
					{
						this._Toolid = default(int);
					}
					this.SendPropertyChanged("Tool");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Group_Group_Tool", Storage="_Member_Group", ThisKey="Groupid", OtherKey="Groupid", IsForeignKey=true)]
		public Member_Group Member_Group
		{
			get
			{
				return this._Member_Group.Entity;
			}
			set
			{
				Member_Group previousValue = this._Member_Group.Entity;
				if (((previousValue != value) 
							|| (this._Member_Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member_Group.Entity = null;
						previousValue.Group_Tools.Remove(this);
					}
					this._Member_Group.Entity = value;
					if ((value != null))
					{
						value.Group_Tools.Add(this);
						this._Groupid = value.Groupid;
					}
					else
					{
						this._Groupid = default(int);
					}
					this.SendPropertyChanged("Member_Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Meal")]
	public partial class Meal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Mealid;
		
		private string _Mealname;
		
		private System.Nullable<System.DateTime> _Mealday;
		
		private System.Nullable<int> _Mealsize;
		
		private EntitySet<Agenda_Meal> _Agenda_Meals;
		
		private EntitySet<Meal_Recipe> _Meal_Recipes;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMealidChanging(int value);
    partial void OnMealidChanged();
    partial void OnMealnameChanging(string value);
    partial void OnMealnameChanged();
    partial void OnMealdayChanging(System.Nullable<System.DateTime> value);
    partial void OnMealdayChanged();
    partial void OnMealsizeChanging(System.Nullable<int> value);
    partial void OnMealsizeChanged();
    #endregion
		
		public Meal()
		{
			this._Agenda_Meals = new EntitySet<Agenda_Meal>(new Action<Agenda_Meal>(this.attach_Agenda_Meals), new Action<Agenda_Meal>(this.detach_Agenda_Meals));
			this._Meal_Recipes = new EntitySet<Meal_Recipe>(new Action<Meal_Recipe>(this.attach_Meal_Recipes), new Action<Meal_Recipe>(this.detach_Meal_Recipes));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mealid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Mealid
		{
			get
			{
				return this._Mealid;
			}
			set
			{
				if ((this._Mealid != value))
				{
					this.OnMealidChanging(value);
					this.SendPropertyChanging();
					this._Mealid = value;
					this.SendPropertyChanged("Mealid");
					this.OnMealidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mealname", DbType="VarChar(50)")]
		public string Mealname
		{
			get
			{
				return this._Mealname;
			}
			set
			{
				if ((this._Mealname != value))
				{
					this.OnMealnameChanging(value);
					this.SendPropertyChanging();
					this._Mealname = value;
					this.SendPropertyChanged("Mealname");
					this.OnMealnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mealday", DbType="Date")]
		public System.Nullable<System.DateTime> Mealday
		{
			get
			{
				return this._Mealday;
			}
			set
			{
				if ((this._Mealday != value))
				{
					this.OnMealdayChanging(value);
					this.SendPropertyChanging();
					this._Mealday = value;
					this.SendPropertyChanged("Mealday");
					this.OnMealdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mealsize", DbType="Int")]
		public System.Nullable<int> Mealsize
		{
			get
			{
				return this._Mealsize;
			}
			set
			{
				if ((this._Mealsize != value))
				{
					this.OnMealsizeChanging(value);
					this.SendPropertyChanging();
					this._Mealsize = value;
					this.SendPropertyChanged("Mealsize");
					this.OnMealsizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meal_Agenda_Meal", Storage="_Agenda_Meals", ThisKey="Mealid", OtherKey="Mealid")]
		public EntitySet<Agenda_Meal> Agenda_Meals
		{
			get
			{
				return this._Agenda_Meals;
			}
			set
			{
				this._Agenda_Meals.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meal_Meal_Recipe", Storage="_Meal_Recipes", ThisKey="Mealid", OtherKey="Mealid")]
		public EntitySet<Meal_Recipe> Meal_Recipes
		{
			get
			{
				return this._Meal_Recipes;
			}
			set
			{
				this._Meal_Recipes.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Agenda_Meals(Agenda_Meal entity)
		{
			this.SendPropertyChanging();
			entity.Meal = this;
		}
		
		private void detach_Agenda_Meals(Agenda_Meal entity)
		{
			this.SendPropertyChanging();
			entity.Meal = null;
		}
		
		private void attach_Meal_Recipes(Meal_Recipe entity)
		{
			this.SendPropertyChanging();
			entity.Meal = this;
		}
		
		private void detach_Meal_Recipes(Meal_Recipe entity)
		{
			this.SendPropertyChanging();
			entity.Meal = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Meal_Recipes")]
	public partial class Meal_Recipe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Mealid;
		
		private int _Recid;
		
		private EntityRef<Meal> _Meal;
		
		private EntityRef<Recipe> _Recipe;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMealidChanging(int value);
    partial void OnMealidChanged();
    partial void OnRecidChanging(int value);
    partial void OnRecidChanged();
    #endregion
		
		public Meal_Recipe()
		{
			this._Meal = default(EntityRef<Meal>);
			this._Recipe = default(EntityRef<Recipe>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mealid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Mealid
		{
			get
			{
				return this._Mealid;
			}
			set
			{
				if ((this._Mealid != value))
				{
					if (this._Meal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMealidChanging(value);
					this.SendPropertyChanging();
					this._Mealid = value;
					this.SendPropertyChanged("Mealid");
					this.OnMealidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Recid
		{
			get
			{
				return this._Recid;
			}
			set
			{
				if ((this._Recid != value))
				{
					if (this._Recipe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecidChanging(value);
					this.SendPropertyChanging();
					this._Recid = value;
					this.SendPropertyChanged("Recid");
					this.OnRecidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meal_Meal_Recipe", Storage="_Meal", ThisKey="Mealid", OtherKey="Mealid", IsForeignKey=true)]
		public Meal Meal
		{
			get
			{
				return this._Meal.Entity;
			}
			set
			{
				Meal previousValue = this._Meal.Entity;
				if (((previousValue != value) 
							|| (this._Meal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Meal.Entity = null;
						previousValue.Meal_Recipes.Remove(this);
					}
					this._Meal.Entity = value;
					if ((value != null))
					{
						value.Meal_Recipes.Add(this);
						this._Mealid = value.Mealid;
					}
					else
					{
						this._Mealid = default(int);
					}
					this.SendPropertyChanged("Meal");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recipe_Meal_Recipe", Storage="_Recipe", ThisKey="Recid", OtherKey="Recid", IsForeignKey=true)]
		public Recipe Recipe
		{
			get
			{
				return this._Recipe.Entity;
			}
			set
			{
				Recipe previousValue = this._Recipe.Entity;
				if (((previousValue != value) 
							|| (this._Recipe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Recipe.Entity = null;
						previousValue.Meal_Recipes.Remove(this);
					}
					this._Recipe.Entity = value;
					if ((value != null))
					{
						value.Meal_Recipes.Add(this);
						this._Recid = value.Recid;
					}
					else
					{
						this._Recid = default(int);
					}
					this.SendPropertyChanged("Recipe");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Member")]
	public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Memname;
		
		private string _Mempass;
		
		private EntityRef<Agenda> _Agenda;
		
		private EntitySet<Member_Allergen> _Member_Allergens;
		
		private EntitySet<Member_Group> _Member_Groups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemnameChanging(string value);
    partial void OnMemnameChanged();
    partial void OnMempassChanging(string value);
    partial void OnMempassChanged();
    #endregion
		
		public Member()
		{
			this._Agenda = default(EntityRef<Agenda>);
			this._Member_Allergens = new EntitySet<Member_Allergen>(new Action<Member_Allergen>(this.attach_Member_Allergens), new Action<Member_Allergen>(this.detach_Member_Allergens));
			this._Member_Groups = new EntitySet<Member_Group>(new Action<Member_Group>(this.attach_Member_Groups), new Action<Member_Group>(this.detach_Member_Groups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Memname", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Memname
		{
			get
			{
				return this._Memname;
			}
			set
			{
				if ((this._Memname != value))
				{
					this.OnMemnameChanging(value);
					this.SendPropertyChanging();
					this._Memname = value;
					this.SendPropertyChanged("Memname");
					this.OnMemnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mempass", DbType="VarChar(255)")]
		public string Mempass
		{
			get
			{
				return this._Mempass;
			}
			set
			{
				if ((this._Mempass != value))
				{
					this.OnMempassChanging(value);
					this.SendPropertyChanging();
					this._Mempass = value;
					this.SendPropertyChanged("Mempass");
					this.OnMempassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Agenda", Storage="_Agenda", ThisKey="Memname", OtherKey="Agowner", IsUnique=true, IsForeignKey=false)]
		public Agenda Agenda
		{
			get
			{
				return this._Agenda.Entity;
			}
			set
			{
				Agenda previousValue = this._Agenda.Entity;
				if (((previousValue != value) 
							|| (this._Agenda.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Agenda.Entity = null;
						previousValue.Member = null;
					}
					this._Agenda.Entity = value;
					if ((value != null))
					{
						value.Member = this;
					}
					this.SendPropertyChanged("Agenda");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Member_Allergen", Storage="_Member_Allergens", ThisKey="Memname", OtherKey="Memname")]
		public EntitySet<Member_Allergen> Member_Allergens
		{
			get
			{
				return this._Member_Allergens;
			}
			set
			{
				this._Member_Allergens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Member_Group", Storage="_Member_Groups", ThisKey="Memname", OtherKey="Groupadmin")]
		public EntitySet<Member_Group> Member_Groups
		{
			get
			{
				return this._Member_Groups;
			}
			set
			{
				this._Member_Groups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Member_Allergens(Member_Allergen entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Member_Allergens(Member_Allergen entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_Member_Groups(Member_Group entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Member_Groups(Member_Group entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Member_Allergens")]
	public partial class Member_Allergen : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Memname;
		
		private string _Foodname;
		
		private string _Substitution;
		
		private EntityRef<Food_Item> _Food_Item;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<Food_Item> _Food_Item1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemnameChanging(string value);
    partial void OnMemnameChanged();
    partial void OnFoodnameChanging(string value);
    partial void OnFoodnameChanged();
    partial void OnSubstitutionChanging(string value);
    partial void OnSubstitutionChanged();
    #endregion
		
		public Member_Allergen()
		{
			this._Food_Item = default(EntityRef<Food_Item>);
			this._Member = default(EntityRef<Member>);
			this._Food_Item1 = default(EntityRef<Food_Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Memname", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Memname
		{
			get
			{
				return this._Memname;
			}
			set
			{
				if ((this._Memname != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemnameChanging(value);
					this.SendPropertyChanging();
					this._Memname = value;
					this.SendPropertyChanged("Memname");
					this.OnMemnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Foodname", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Foodname
		{
			get
			{
				return this._Foodname;
			}
			set
			{
				if ((this._Foodname != value))
				{
					if (this._Food_Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFoodnameChanging(value);
					this.SendPropertyChanging();
					this._Foodname = value;
					this.SendPropertyChanged("Foodname");
					this.OnFoodnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Substitution", DbType="VarChar(50)")]
		public string Substitution
		{
			get
			{
				return this._Substitution;
			}
			set
			{
				if ((this._Substitution != value))
				{
					if (this._Food_Item1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubstitutionChanging(value);
					this.SendPropertyChanging();
					this._Substitution = value;
					this.SendPropertyChanged("Substitution");
					this.OnSubstitutionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_Item_Member_Allergen", Storage="_Food_Item", ThisKey="Foodname", OtherKey="Foodname", IsForeignKey=true)]
		public Food_Item Food_Item
		{
			get
			{
				return this._Food_Item.Entity;
			}
			set
			{
				Food_Item previousValue = this._Food_Item.Entity;
				if (((previousValue != value) 
							|| (this._Food_Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Food_Item.Entity = null;
						previousValue.Member_Allergens.Remove(this);
					}
					this._Food_Item.Entity = value;
					if ((value != null))
					{
						value.Member_Allergens.Add(this);
						this._Foodname = value.Foodname;
					}
					else
					{
						this._Foodname = default(string);
					}
					this.SendPropertyChanged("Food_Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Member_Allergen", Storage="_Member", ThisKey="Memname", OtherKey="Memname", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Member_Allergens.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Member_Allergens.Add(this);
						this._Memname = value.Memname;
					}
					else
					{
						this._Memname = default(string);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_Item_Member_Allergen1", Storage="_Food_Item1", ThisKey="Substitution", OtherKey="Foodname", IsForeignKey=true)]
		public Food_Item Food_Item1
		{
			get
			{
				return this._Food_Item1.Entity;
			}
			set
			{
				Food_Item previousValue = this._Food_Item1.Entity;
				if (((previousValue != value) 
							|| (this._Food_Item1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Food_Item1.Entity = null;
						previousValue.Member_Allergens1.Remove(this);
					}
					this._Food_Item1.Entity = value;
					if ((value != null))
					{
						value.Member_Allergens1.Add(this);
						this._Substitution = value.Foodname;
					}
					else
					{
						this._Substitution = default(string);
					}
					this.SendPropertyChanged("Food_Item1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Member_Group")]
	public partial class Member_Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Groupid;
		
		private string _Groupadmin;
		
		private string _Groupname;
		
		private EntitySet<Group_Tool> _Group_Tools;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupidChanging(int value);
    partial void OnGroupidChanged();
    partial void OnGroupadminChanging(string value);
    partial void OnGroupadminChanged();
    partial void OnGroupnameChanging(string value);
    partial void OnGroupnameChanged();
    #endregion
		
		public Member_Group()
		{
			this._Group_Tools = new EntitySet<Group_Tool>(new Action<Group_Tool>(this.attach_Group_Tools), new Action<Group_Tool>(this.detach_Group_Tools));
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Groupid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Groupid
		{
			get
			{
				return this._Groupid;
			}
			set
			{
				if ((this._Groupid != value))
				{
					this.OnGroupidChanging(value);
					this.SendPropertyChanging();
					this._Groupid = value;
					this.SendPropertyChanged("Groupid");
					this.OnGroupidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Groupadmin", DbType="VarChar(30)")]
		public string Groupadmin
		{
			get
			{
				return this._Groupadmin;
			}
			set
			{
				if ((this._Groupadmin != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupadminChanging(value);
					this.SendPropertyChanging();
					this._Groupadmin = value;
					this.SendPropertyChanged("Groupadmin");
					this.OnGroupadminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Groupname", DbType="VarChar(50)")]
		public string Groupname
		{
			get
			{
				return this._Groupname;
			}
			set
			{
				if ((this._Groupname != value))
				{
					this.OnGroupnameChanging(value);
					this.SendPropertyChanging();
					this._Groupname = value;
					this.SendPropertyChanged("Groupname");
					this.OnGroupnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Group_Group_Tool", Storage="_Group_Tools", ThisKey="Groupid", OtherKey="Groupid")]
		public EntitySet<Group_Tool> Group_Tools
		{
			get
			{
				return this._Group_Tools;
			}
			set
			{
				this._Group_Tools.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Member_Group", Storage="_Member", ThisKey="Groupadmin", OtherKey="Memname", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Member_Groups.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Member_Groups.Add(this);
						this._Groupadmin = value.Memname;
					}
					else
					{
						this._Groupadmin = default(string);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Group_Tools(Group_Tool entity)
		{
			this.SendPropertyChanging();
			entity.Member_Group = this;
		}
		
		private void detach_Group_Tools(Group_Tool entity)
		{
			this.SendPropertyChanging();
			entity.Member_Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Recipe")]
	public partial class Recipe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Recid;
		
		private string _Recname;
		
		private string _Recdesc;
		
		private System.Nullable<int> _Recdiff;
		
		private System.Nullable<int> _Rectime;
		
		private EntitySet<Meal_Recipe> _Meal_Recipes;
		
		private EntitySet<Recipe_Task> _Recipe_Tasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecidChanging(int value);
    partial void OnRecidChanged();
    partial void OnRecnameChanging(string value);
    partial void OnRecnameChanged();
    partial void OnRecdescChanging(string value);
    partial void OnRecdescChanged();
    partial void OnRecdiffChanging(System.Nullable<int> value);
    partial void OnRecdiffChanged();
    partial void OnRectimeChanging(System.Nullable<int> value);
    partial void OnRectimeChanged();
    #endregion
		
		public Recipe()
		{
			this._Meal_Recipes = new EntitySet<Meal_Recipe>(new Action<Meal_Recipe>(this.attach_Meal_Recipes), new Action<Meal_Recipe>(this.detach_Meal_Recipes));
			this._Recipe_Tasks = new EntitySet<Recipe_Task>(new Action<Recipe_Task>(this.attach_Recipe_Tasks), new Action<Recipe_Task>(this.detach_Recipe_Tasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Recid
		{
			get
			{
				return this._Recid;
			}
			set
			{
				if ((this._Recid != value))
				{
					this.OnRecidChanging(value);
					this.SendPropertyChanging();
					this._Recid = value;
					this.SendPropertyChanged("Recid");
					this.OnRecidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recname", DbType="VarChar(255)")]
		public string Recname
		{
			get
			{
				return this._Recname;
			}
			set
			{
				if ((this._Recname != value))
				{
					this.OnRecnameChanging(value);
					this.SendPropertyChanging();
					this._Recname = value;
					this.SendPropertyChanged("Recname");
					this.OnRecnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recdesc", DbType="VarChar(255)")]
		public string Recdesc
		{
			get
			{
				return this._Recdesc;
			}
			set
			{
				if ((this._Recdesc != value))
				{
					this.OnRecdescChanging(value);
					this.SendPropertyChanging();
					this._Recdesc = value;
					this.SendPropertyChanged("Recdesc");
					this.OnRecdescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recdiff", DbType="Int")]
		public System.Nullable<int> Recdiff
		{
			get
			{
				return this._Recdiff;
			}
			set
			{
				if ((this._Recdiff != value))
				{
					this.OnRecdiffChanging(value);
					this.SendPropertyChanging();
					this._Recdiff = value;
					this.SendPropertyChanged("Recdiff");
					this.OnRecdiffChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rectime", DbType="Int")]
		public System.Nullable<int> Rectime
		{
			get
			{
				return this._Rectime;
			}
			set
			{
				if ((this._Rectime != value))
				{
					this.OnRectimeChanging(value);
					this.SendPropertyChanging();
					this._Rectime = value;
					this.SendPropertyChanged("Rectime");
					this.OnRectimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recipe_Meal_Recipe", Storage="_Meal_Recipes", ThisKey="Recid", OtherKey="Recid")]
		public EntitySet<Meal_Recipe> Meal_Recipes
		{
			get
			{
				return this._Meal_Recipes;
			}
			set
			{
				this._Meal_Recipes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recipe_Recipe_Task", Storage="_Recipe_Tasks", ThisKey="Recid", OtherKey="Recid")]
		public EntitySet<Recipe_Task> Recipe_Tasks
		{
			get
			{
				return this._Recipe_Tasks;
			}
			set
			{
				this._Recipe_Tasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Meal_Recipes(Meal_Recipe entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = this;
		}
		
		private void detach_Meal_Recipes(Meal_Recipe entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = null;
		}
		
		private void attach_Recipe_Tasks(Recipe_Task entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = this;
		}
		
		private void detach_Recipe_Tasks(Recipe_Task entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Recipe_Tasks")]
	public partial class Recipe_Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Recid;
		
		private int _Taskid;
		
		private EntityRef<Recipe> _Recipe;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecidChanging(int value);
    partial void OnRecidChanged();
    partial void OnTaskidChanging(int value);
    partial void OnTaskidChanged();
    #endregion
		
		public Recipe_Task()
		{
			this._Recipe = default(EntityRef<Recipe>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Recid
		{
			get
			{
				return this._Recid;
			}
			set
			{
				if ((this._Recid != value))
				{
					if (this._Recipe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecidChanging(value);
					this.SendPropertyChanging();
					this._Recid = value;
					this.SendPropertyChanged("Recid");
					this.OnRecidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Taskid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Taskid
		{
			get
			{
				return this._Taskid;
			}
			set
			{
				if ((this._Taskid != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskidChanging(value);
					this.SendPropertyChanging();
					this._Taskid = value;
					this.SendPropertyChanged("Taskid");
					this.OnTaskidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recipe_Recipe_Task", Storage="_Recipe", ThisKey="Recid", OtherKey="Recid", IsForeignKey=true)]
		public Recipe Recipe
		{
			get
			{
				return this._Recipe.Entity;
			}
			set
			{
				Recipe previousValue = this._Recipe.Entity;
				if (((previousValue != value) 
							|| (this._Recipe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Recipe.Entity = null;
						previousValue.Recipe_Tasks.Remove(this);
					}
					this._Recipe.Entity = value;
					if ((value != null))
					{
						value.Recipe_Tasks.Add(this);
						this._Recid = value.Recid;
					}
					else
					{
						this._Recid = default(int);
					}
					this.SendPropertyChanged("Recipe");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_Recipe_Task", Storage="_Task", ThisKey="Taskid", OtherKey="Taskid", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.Recipe_Tasks.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.Recipe_Tasks.Add(this);
						this._Taskid = value.Taskid;
					}
					else
					{
						this._Taskid = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Stove")]
	public partial class Stove : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Toolid;
		
		private string _Pwrtype;
		
		private System.Nullable<int> _Burnnum;
		
		private EntityRef<Tool> _Tool;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnToolidChanging(int value);
    partial void OnToolidChanged();
    partial void OnPwrtypeChanging(string value);
    partial void OnPwrtypeChanged();
    partial void OnBurnnumChanging(System.Nullable<int> value);
    partial void OnBurnnumChanged();
    #endregion
		
		public Stove()
		{
			this._Tool = default(EntityRef<Tool>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Toolid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Toolid
		{
			get
			{
				return this._Toolid;
			}
			set
			{
				if ((this._Toolid != value))
				{
					if (this._Tool.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToolidChanging(value);
					this.SendPropertyChanging();
					this._Toolid = value;
					this.SendPropertyChanged("Toolid");
					this.OnToolidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pwrtype", DbType="VarChar(50)")]
		public string Pwrtype
		{
			get
			{
				return this._Pwrtype;
			}
			set
			{
				if ((this._Pwrtype != value))
				{
					this.OnPwrtypeChanging(value);
					this.SendPropertyChanging();
					this._Pwrtype = value;
					this.SendPropertyChanged("Pwrtype");
					this.OnPwrtypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Burnnum", DbType="Int")]
		public System.Nullable<int> Burnnum
		{
			get
			{
				return this._Burnnum;
			}
			set
			{
				if ((this._Burnnum != value))
				{
					this.OnBurnnumChanging(value);
					this.SendPropertyChanging();
					this._Burnnum = value;
					this.SendPropertyChanged("Burnnum");
					this.OnBurnnumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tool_Stove", Storage="_Tool", ThisKey="Toolid", OtherKey="Toolid", IsForeignKey=true)]
		public Tool Tool
		{
			get
			{
				return this._Tool.Entity;
			}
			set
			{
				Tool previousValue = this._Tool.Entity;
				if (((previousValue != value) 
							|| (this._Tool.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tool.Entity = null;
						previousValue.Stove = null;
					}
					this._Tool.Entity = value;
					if ((value != null))
					{
						value.Stove = this;
						this._Toolid = value.Toolid;
					}
					else
					{
						this._Toolid = default(int);
					}
					this.SendPropertyChanged("Tool");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Task")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Taskid;
		
		private string _Taskname;
		
		private string _Taskdesc;
		
		private System.Nullable<int> _Tasktime;
		
		private EntitySet<Recipe_Task> _Recipe_Tasks;
		
		private EntitySet<Task_Food_Item> _Task_Food_Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskidChanging(int value);
    partial void OnTaskidChanged();
    partial void OnTasknameChanging(string value);
    partial void OnTasknameChanged();
    partial void OnTaskdescChanging(string value);
    partial void OnTaskdescChanged();
    partial void OnTasktimeChanging(System.Nullable<int> value);
    partial void OnTasktimeChanged();
    #endregion
		
		public Task()
		{
			this._Recipe_Tasks = new EntitySet<Recipe_Task>(new Action<Recipe_Task>(this.attach_Recipe_Tasks), new Action<Recipe_Task>(this.detach_Recipe_Tasks));
			this._Task_Food_Items = new EntitySet<Task_Food_Item>(new Action<Task_Food_Item>(this.attach_Task_Food_Items), new Action<Task_Food_Item>(this.detach_Task_Food_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Taskid", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Taskid
		{
			get
			{
				return this._Taskid;
			}
			set
			{
				if ((this._Taskid != value))
				{
					this.OnTaskidChanging(value);
					this.SendPropertyChanging();
					this._Taskid = value;
					this.SendPropertyChanged("Taskid");
					this.OnTaskidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Taskname", DbType="VarChar(50)")]
		public string Taskname
		{
			get
			{
				return this._Taskname;
			}
			set
			{
				if ((this._Taskname != value))
				{
					this.OnTasknameChanging(value);
					this.SendPropertyChanging();
					this._Taskname = value;
					this.SendPropertyChanged("Taskname");
					this.OnTasknameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Taskdesc", DbType="VarChar(255)")]
		public string Taskdesc
		{
			get
			{
				return this._Taskdesc;
			}
			set
			{
				if ((this._Taskdesc != value))
				{
					this.OnTaskdescChanging(value);
					this.SendPropertyChanging();
					this._Taskdesc = value;
					this.SendPropertyChanged("Taskdesc");
					this.OnTaskdescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tasktime", DbType="Int")]
		public System.Nullable<int> Tasktime
		{
			get
			{
				return this._Tasktime;
			}
			set
			{
				if ((this._Tasktime != value))
				{
					this.OnTasktimeChanging(value);
					this.SendPropertyChanging();
					this._Tasktime = value;
					this.SendPropertyChanged("Tasktime");
					this.OnTasktimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_Recipe_Task", Storage="_Recipe_Tasks", ThisKey="Taskid", OtherKey="Taskid")]
		public EntitySet<Recipe_Task> Recipe_Tasks
		{
			get
			{
				return this._Recipe_Tasks;
			}
			set
			{
				this._Recipe_Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_Task_Food_Item", Storage="_Task_Food_Items", ThisKey="Taskid", OtherKey="Taskid")]
		public EntitySet<Task_Food_Item> Task_Food_Items
		{
			get
			{
				return this._Task_Food_Items;
			}
			set
			{
				this._Task_Food_Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Recipe_Tasks(Recipe_Task entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_Recipe_Tasks(Recipe_Task entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
		
		private void attach_Task_Food_Items(Task_Food_Item entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_Task_Food_Items(Task_Food_Item entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Task_Food_Items")]
	public partial class Task_Food_Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Taskid;
		
		private string _Foodname;
		
		private EntityRef<Food_Item> _Food_Item;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskidChanging(int value);
    partial void OnTaskidChanged();
    partial void OnFoodnameChanging(string value);
    partial void OnFoodnameChanged();
    #endregion
		
		public Task_Food_Item()
		{
			this._Food_Item = default(EntityRef<Food_Item>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Taskid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Taskid
		{
			get
			{
				return this._Taskid;
			}
			set
			{
				if ((this._Taskid != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskidChanging(value);
					this.SendPropertyChanging();
					this._Taskid = value;
					this.SendPropertyChanged("Taskid");
					this.OnTaskidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Foodname", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Foodname
		{
			get
			{
				return this._Foodname;
			}
			set
			{
				if ((this._Foodname != value))
				{
					if (this._Food_Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFoodnameChanging(value);
					this.SendPropertyChanging();
					this._Foodname = value;
					this.SendPropertyChanged("Foodname");
					this.OnFoodnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_Item_Task_Food_Item", Storage="_Food_Item", ThisKey="Foodname", OtherKey="Foodname", IsForeignKey=true)]
		public Food_Item Food_Item
		{
			get
			{
				return this._Food_Item.Entity;
			}
			set
			{
				Food_Item previousValue = this._Food_Item.Entity;
				if (((previousValue != value) 
							|| (this._Food_Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Food_Item.Entity = null;
						previousValue.Task_Food_Items.Remove(this);
					}
					this._Food_Item.Entity = value;
					if ((value != null))
					{
						value.Task_Food_Items.Add(this);
						this._Foodname = value.Foodname;
					}
					else
					{
						this._Foodname = default(string);
					}
					this.SendPropertyChanged("Food_Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_Task_Food_Item", Storage="_Task", ThisKey="Taskid", OtherKey="Taskid", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.Task_Food_Items.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.Task_Food_Items.Add(this);
						this._Taskid = value.Taskid;
					}
					else
					{
						this._Taskid = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class GET_AllergensResult
	{
		
		private string _Foodname;
		
		public GET_AllergensResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Foodname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Foodname
		{
			get
			{
				return this._Foodname;
			}
			set
			{
				if ((this._Foodname != value))
				{
					this._Foodname = value;
				}
			}
		}
	}
	
	public partial class GET_Allergens_UserResult
	{
		
		private string _Foodname;
		
		private string _Substitution;
		
		public GET_Allergens_UserResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Foodname", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Foodname
		{
			get
			{
				return this._Foodname;
			}
			set
			{
				if ((this._Foodname != value))
				{
					this._Foodname = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Substitution", DbType="VarChar(50)")]
		public string Substitution
		{
			get
			{
				return this._Substitution;
			}
			set
			{
				if ((this._Substitution != value))
				{
					this._Substitution = value;
				}
			}
		}
	}
	
	public partial class GET_ApplianceInfoResult
	{
		
		private int _Groupid;
		
		private string _Groupname;
		
		private string _Pwrtype;
		
		private System.Nullable<int> _Burnnum;
		
		public GET_ApplianceInfoResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Groupid", DbType="Int NOT NULL")]
		public int Groupid
		{
			get
			{
				return this._Groupid;
			}
			set
			{
				if ((this._Groupid != value))
				{
					this._Groupid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Groupname", DbType="VarChar(50)")]
		public string Groupname
		{
			get
			{
				return this._Groupname;
			}
			set
			{
				if ((this._Groupname != value))
				{
					this._Groupname = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pwrtype", DbType="VarChar(50)")]
		public string Pwrtype
		{
			get
			{
				return this._Pwrtype;
			}
			set
			{
				if ((this._Pwrtype != value))
				{
					this._Pwrtype = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Burnnum", DbType="Int")]
		public System.Nullable<int> Burnnum
		{
			get
			{
				return this._Burnnum;
			}
			set
			{
				if ((this._Burnnum != value))
				{
					this._Burnnum = value;
				}
			}
		}
	}
	
	public partial class Get_GroupsResult
	{
		
		private int _Groupid;
		
		private string _Groupname;
		
		private string _Groupadmin;
		
		public Get_GroupsResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Groupid", DbType="Int NOT NULL")]
		public int Groupid
		{
			get
			{
				return this._Groupid;
			}
			set
			{
				if ((this._Groupid != value))
				{
					this._Groupid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Groupname", DbType="VarChar(50)")]
		public string Groupname
		{
			get
			{
				return this._Groupname;
			}
			set
			{
				if ((this._Groupname != value))
				{
					this._Groupname = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Groupadmin", DbType="VarChar(30)")]
		public string Groupadmin
		{
			get
			{
				return this._Groupadmin;
			}
			set
			{
				if ((this._Groupadmin != value))
				{
					this._Groupadmin = value;
				}
			}
		}
	}
	
	public partial class GetMealForDayResult
	{
		
		private string _Mealname;
		
		private System.Nullable<int> _Mealsize;
		
		private string _Recname;
		
		private string _Recdesc;
		
		public GetMealForDayResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mealname", DbType="VarChar(50)")]
		public string Mealname
		{
			get
			{
				return this._Mealname;
			}
			set
			{
				if ((this._Mealname != value))
				{
					this._Mealname = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mealsize", DbType="Int")]
		public System.Nullable<int> Mealsize
		{
			get
			{
				return this._Mealsize;
			}
			set
			{
				if ((this._Mealsize != value))
				{
					this._Mealsize = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recname", DbType="VarChar(255)")]
		public string Recname
		{
			get
			{
				return this._Recname;
			}
			set
			{
				if ((this._Recname != value))
				{
					this._Recname = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recdesc", DbType="VarChar(255)")]
		public string Recdesc
		{
			get
			{
				return this._Recdesc;
			}
			set
			{
				if ((this._Recdesc != value))
				{
					this._Recdesc = value;
				}
			}
		}
	}
	
	public partial class SearchSingleKeywordResult
	{
		
		private System.Nullable<int> _Recid;
		
		private string _Recname;
		
		private string _Recdesc;
		
		private System.Nullable<int> _Recdiff;
		
		private System.Nullable<int> _Rectime;
		
		public SearchSingleKeywordResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recid", DbType="Int")]
		public System.Nullable<int> Recid
		{
			get
			{
				return this._Recid;
			}
			set
			{
				if ((this._Recid != value))
				{
					this._Recid = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recname", DbType="VarChar(50)")]
		public string Recname
		{
			get
			{
				return this._Recname;
			}
			set
			{
				if ((this._Recname != value))
				{
					this._Recname = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recdesc", DbType="VarChar(255)")]
		public string Recdesc
		{
			get
			{
				return this._Recdesc;
			}
			set
			{
				if ((this._Recdesc != value))
				{
					this._Recdesc = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recdiff", DbType="Int")]
		public System.Nullable<int> Recdiff
		{
			get
			{
				return this._Recdiff;
			}
			set
			{
				if ((this._Recdiff != value))
				{
					this._Recdiff = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rectime", DbType="Int")]
		public System.Nullable<int> Rectime
		{
			get
			{
				return this._Rectime;
			}
			set
			{
				if ((this._Rectime != value))
				{
					this._Rectime = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
