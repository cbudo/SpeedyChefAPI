#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace SpeedyChefApi
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SpeedyChef2")]
	public partial class SpeedyChefDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTool(Tool instance);
    partial void UpdateTool(Tool instance);
    partial void DeleteTool(Tool instance);
    partial void InsertAgenda(Agenda instance);
    partial void UpdateAgenda(Agenda instance);
    partial void DeleteAgenda(Agenda instance);
    partial void InsertAgenda_Recipe(Agenda_Recipe instance);
    partial void UpdateAgenda_Recipe(Agenda_Recipe instance);
    partial void DeleteAgenda_Recipe(Agenda_Recipe instance);
    partial void InsertFood_Item(Food_Item instance);
    partial void UpdateFood_Item(Food_Item instance);
    partial void DeleteFood_Item(Food_Item instance);
    partial void InsertMember(Member instance);
    partial void UpdateMember(Member instance);
    partial void DeleteMember(Member instance);
    partial void InsertMember_Allergen(Member_Allergen instance);
    partial void UpdateMember_Allergen(Member_Allergen instance);
    partial void DeleteMember_Allergen(Member_Allergen instance);
    partial void InsertMember_Group(Member_Group instance);
    partial void UpdateMember_Group(Member_Group instance);
    partial void DeleteMember_Group(Member_Group instance);
    partial void InsertOven(Oven instance);
    partial void UpdateOven(Oven instance);
    partial void DeleteOven(Oven instance);
    partial void InsertRecipe(Recipe instance);
    partial void UpdateRecipe(Recipe instance);
    partial void DeleteRecipe(Recipe instance);
    partial void InsertRecipe_Task(Recipe_Task instance);
    partial void UpdateRecipe_Task(Recipe_Task instance);
    partial void DeleteRecipe_Task(Recipe_Task instance);
    partial void InsertTask(Task instance);
    partial void UpdateTask(Task instance);
    partial void DeleteTask(Task instance);
    partial void InsertTask_Food_Item(Task_Food_Item instance);
    partial void UpdateTask_Food_Item(Task_Food_Item instance);
    partial void DeleteTask_Food_Item(Task_Food_Item instance);
    #endregion
		
		public SpeedyChefDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SpeedyChef2ConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public SpeedyChefDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SpeedyChefDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SpeedyChefDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SpeedyChefDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Tool> Tools
		{
			get
			{
				return this.GetTable<Tool>();
			}
		}
		
		public System.Data.Linq.Table<Agenda> Agendas
		{
			get
			{
				return this.GetTable<Agenda>();
			}
		}
		
		public System.Data.Linq.Table<Agenda_Recipe> Agenda_Recipes
		{
			get
			{
				return this.GetTable<Agenda_Recipe>();
			}
		}
		
		public System.Data.Linq.Table<Food_Item> Food_Items
		{
			get
			{
				return this.GetTable<Food_Item>();
			}
		}
		
		public System.Data.Linq.Table<Member> Members
		{
			get
			{
				return this.GetTable<Member>();
			}
		}
		
		public System.Data.Linq.Table<Member_Allergen> Member_Allergens
		{
			get
			{
				return this.GetTable<Member_Allergen>();
			}
		}
		
		public System.Data.Linq.Table<Member_Group> Member_Groups
		{
			get
			{
				return this.GetTable<Member_Group>();
			}
		}
		
		public System.Data.Linq.Table<Oven> Ovens
		{
			get
			{
				return this.GetTable<Oven>();
			}
		}
		
		public System.Data.Linq.Table<Recipe> Recipes
		{
			get
			{
				return this.GetTable<Recipe>();
			}
		}
		
		public System.Data.Linq.Table<Recipe_Task> Recipe_Tasks
		{
			get
			{
				return this.GetTable<Recipe_Task>();
			}
		}
		
		public System.Data.Linq.Table<Task> Tasks
		{
			get
			{
				return this.GetTable<Task>();
			}
		}
		
		public System.Data.Linq.Table<Task_Food_Item> Task_Food_Items
		{
			get
			{
				return this.GetTable<Task_Food_Item>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tool")]
	public partial class Tool : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Toolname;
		
		private string _Groupname;
		
		private string _Tooldesc;
		
		private EntitySet<Oven> _Ovens;
		
		private EntityRef<Member_Group> _Member_Group;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnToolnameChanging(string value);
    partial void OnToolnameChanged();
    partial void OnGroupnameChanging(string value);
    partial void OnGroupnameChanged();
    partial void OnTooldescChanging(string value);
    partial void OnTooldescChanged();
    #endregion
		
		public Tool()
		{
			this._Ovens = new EntitySet<Oven>(new Action<Oven>(this.attach_Ovens), new Action<Oven>(this.detach_Ovens));
			this._Member_Group = default(EntityRef<Member_Group>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Toolname", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Toolname
		{
			get
			{
				return this._Toolname;
			}
			set
			{
				if ((this._Toolname != value))
				{
					this.OnToolnameChanging(value);
					this.SendPropertyChanging();
					this._Toolname = value;
					this.SendPropertyChanged("Toolname");
					this.OnToolnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Groupname", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Groupname
		{
			get
			{
				return this._Groupname;
			}
			set
			{
				if ((this._Groupname != value))
				{
					if (this._Member_Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupnameChanging(value);
					this.SendPropertyChanging();
					this._Groupname = value;
					this.SendPropertyChanged("Groupname");
					this.OnGroupnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tooldesc", DbType="VarChar(255)")]
		public string Tooldesc
		{
			get
			{
				return this._Tooldesc;
			}
			set
			{
				if ((this._Tooldesc != value))
				{
					this.OnTooldescChanging(value);
					this.SendPropertyChanging();
					this._Tooldesc = value;
					this.SendPropertyChanged("Tooldesc");
					this.OnTooldescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tool_Oven", Storage="_Ovens", ThisKey="Toolname", OtherKey="Toolname")]
		public EntitySet<Oven> Ovens
		{
			get
			{
				return this._Ovens;
			}
			set
			{
				this._Ovens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Group_Tool", Storage="_Member_Group", ThisKey="Groupname", OtherKey="Groupname", IsForeignKey=true)]
		public Member_Group Member_Group
		{
			get
			{
				return this._Member_Group.Entity;
			}
			set
			{
				Member_Group previousValue = this._Member_Group.Entity;
				if (((previousValue != value) 
							|| (this._Member_Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member_Group.Entity = null;
						previousValue.Tools.Remove(this);
					}
					this._Member_Group.Entity = value;
					if ((value != null))
					{
						value.Tools.Add(this);
						this._Groupname = value.Groupname;
					}
					else
					{
						this._Groupname = default(string);
					}
					this.SendPropertyChanged("Member_Group");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Ovens(Oven entity)
		{
			this.SendPropertyChanging();
			entity.Tool = this;
		}
		
		private void detach_Ovens(Oven entity)
		{
			this.SendPropertyChanging();
			entity.Tool = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Agenda")]
	public partial class Agenda : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Agowner;
		
		private string _Agname;
		
		private System.Nullable<System.DateTime> _Agstartdate;
		
		private System.Nullable<System.DateTime> _Agenddate;
		
		private EntitySet<Agenda_Recipe> _Agenda_Recipes;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAgownerChanging(string value);
    partial void OnAgownerChanged();
    partial void OnAgnameChanging(string value);
    partial void OnAgnameChanged();
    partial void OnAgstartdateChanging(System.Nullable<System.DateTime> value);
    partial void OnAgstartdateChanged();
    partial void OnAgenddateChanging(System.Nullable<System.DateTime> value);
    partial void OnAgenddateChanged();
    #endregion
		
		public Agenda()
		{
			this._Agenda_Recipes = new EntitySet<Agenda_Recipe>(new Action<Agenda_Recipe>(this.attach_Agenda_Recipes), new Action<Agenda_Recipe>(this.detach_Agenda_Recipes));
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Agowner", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Agowner
		{
			get
			{
				return this._Agowner;
			}
			set
			{
				if ((this._Agowner != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgownerChanging(value);
					this.SendPropertyChanging();
					this._Agowner = value;
					this.SendPropertyChanged("Agowner");
					this.OnAgownerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Agname", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Agname
		{
			get
			{
				return this._Agname;
			}
			set
			{
				if ((this._Agname != value))
				{
					this.OnAgnameChanging(value);
					this.SendPropertyChanging();
					this._Agname = value;
					this.SendPropertyChanged("Agname");
					this.OnAgnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Agstartdate", DbType="Date")]
		public System.Nullable<System.DateTime> Agstartdate
		{
			get
			{
				return this._Agstartdate;
			}
			set
			{
				if ((this._Agstartdate != value))
				{
					this.OnAgstartdateChanging(value);
					this.SendPropertyChanging();
					this._Agstartdate = value;
					this.SendPropertyChanged("Agstartdate");
					this.OnAgstartdateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Agenddate", DbType="Date")]
		public System.Nullable<System.DateTime> Agenddate
		{
			get
			{
				return this._Agenddate;
			}
			set
			{
				if ((this._Agenddate != value))
				{
					this.OnAgenddateChanging(value);
					this.SendPropertyChanging();
					this._Agenddate = value;
					this.SendPropertyChanged("Agenddate");
					this.OnAgenddateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Agenda_Agenda_Recipe", Storage="_Agenda_Recipes", ThisKey="Agowner", OtherKey="Agowner")]
		public EntitySet<Agenda_Recipe> Agenda_Recipes
		{
			get
			{
				return this._Agenda_Recipes;
			}
			set
			{
				this._Agenda_Recipes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Agenda", Storage="_Member", ThisKey="Agowner", OtherKey="Memname", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Agendas.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Agendas.Add(this);
						this._Agowner = value.Memname;
					}
					else
					{
						this._Agowner = default(string);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Agenda_Recipes(Agenda_Recipe entity)
		{
			this.SendPropertyChanging();
			entity.Agenda = this;
		}
		
		private void detach_Agenda_Recipes(Agenda_Recipe entity)
		{
			this.SendPropertyChanging();
			entity.Agenda = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Agenda_Recipes")]
	public partial class Agenda_Recipe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Agowner;
		
		private int _Recid;
		
		private System.Nullable<System.DateTime> _Recstart;
		
		private System.Nullable<System.DateTime> _Recend;
		
		private System.Nullable<int> _Partysize;
		
		private EntityRef<Agenda> _Agenda;
		
		private EntityRef<Recipe> _Recipe;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAgownerChanging(string value);
    partial void OnAgownerChanged();
    partial void OnRecidChanging(int value);
    partial void OnRecidChanged();
    partial void OnRecstartChanging(System.Nullable<System.DateTime> value);
    partial void OnRecstartChanged();
    partial void OnRecendChanging(System.Nullable<System.DateTime> value);
    partial void OnRecendChanged();
    partial void OnPartysizeChanging(System.Nullable<int> value);
    partial void OnPartysizeChanged();
    #endregion
		
		public Agenda_Recipe()
		{
			this._Agenda = default(EntityRef<Agenda>);
			this._Recipe = default(EntityRef<Recipe>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Agowner", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Agowner
		{
			get
			{
				return this._Agowner;
			}
			set
			{
				if ((this._Agowner != value))
				{
					if (this._Agenda.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAgownerChanging(value);
					this.SendPropertyChanging();
					this._Agowner = value;
					this.SendPropertyChanged("Agowner");
					this.OnAgownerChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Recid
		{
			get
			{
				return this._Recid;
			}
			set
			{
				if ((this._Recid != value))
				{
					if (this._Recipe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecidChanging(value);
					this.SendPropertyChanging();
					this._Recid = value;
					this.SendPropertyChanged("Recid");
					this.OnRecidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recstart", DbType="DateTime")]
		public System.Nullable<System.DateTime> Recstart
		{
			get
			{
				return this._Recstart;
			}
			set
			{
				if ((this._Recstart != value))
				{
					this.OnRecstartChanging(value);
					this.SendPropertyChanging();
					this._Recstart = value;
					this.SendPropertyChanged("Recstart");
					this.OnRecstartChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recend", DbType="DateTime")]
		public System.Nullable<System.DateTime> Recend
		{
			get
			{
				return this._Recend;
			}
			set
			{
				if ((this._Recend != value))
				{
					this.OnRecendChanging(value);
					this.SendPropertyChanging();
					this._Recend = value;
					this.SendPropertyChanged("Recend");
					this.OnRecendChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Partysize", DbType="Int")]
		public System.Nullable<int> Partysize
		{
			get
			{
				return this._Partysize;
			}
			set
			{
				if ((this._Partysize != value))
				{
					this.OnPartysizeChanging(value);
					this.SendPropertyChanging();
					this._Partysize = value;
					this.SendPropertyChanged("Partysize");
					this.OnPartysizeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Agenda_Agenda_Recipe", Storage="_Agenda", ThisKey="Agowner", OtherKey="Agowner", IsForeignKey=true)]
		public Agenda Agenda
		{
			get
			{
				return this._Agenda.Entity;
			}
			set
			{
				Agenda previousValue = this._Agenda.Entity;
				if (((previousValue != value) 
							|| (this._Agenda.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Agenda.Entity = null;
						previousValue.Agenda_Recipes.Remove(this);
					}
					this._Agenda.Entity = value;
					if ((value != null))
					{
						value.Agenda_Recipes.Add(this);
						this._Agowner = value.Agowner;
					}
					else
					{
						this._Agowner = default(string);
					}
					this.SendPropertyChanged("Agenda");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recipe_Agenda_Recipe", Storage="_Recipe", ThisKey="Recid", OtherKey="Recid", IsForeignKey=true)]
		public Recipe Recipe
		{
			get
			{
				return this._Recipe.Entity;
			}
			set
			{
				Recipe previousValue = this._Recipe.Entity;
				if (((previousValue != value) 
							|| (this._Recipe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Recipe.Entity = null;
						previousValue.Agenda_Recipes.Remove(this);
					}
					this._Recipe.Entity = value;
					if ((value != null))
					{
						value.Agenda_Recipes.Add(this);
						this._Recid = value.Recid;
					}
					else
					{
						this._Recid = default(int);
					}
					this.SendPropertyChanged("Recipe");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Food_Item")]
	public partial class Food_Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Foodname;
		
		private EntitySet<Member_Allergen> _Member_Allergens;
		
		private EntitySet<Member_Allergen> _Member_Allergens1;
		
		private EntitySet<Task_Food_Item> _Task_Food_Items;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFoodnameChanging(string value);
    partial void OnFoodnameChanged();
    #endregion
		
		public Food_Item()
		{
			this._Member_Allergens = new EntitySet<Member_Allergen>(new Action<Member_Allergen>(this.attach_Member_Allergens), new Action<Member_Allergen>(this.detach_Member_Allergens));
			this._Member_Allergens1 = new EntitySet<Member_Allergen>(new Action<Member_Allergen>(this.attach_Member_Allergens1), new Action<Member_Allergen>(this.detach_Member_Allergens1));
			this._Task_Food_Items = new EntitySet<Task_Food_Item>(new Action<Task_Food_Item>(this.attach_Task_Food_Items), new Action<Task_Food_Item>(this.detach_Task_Food_Items));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Foodname", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Foodname
		{
			get
			{
				return this._Foodname;
			}
			set
			{
				if ((this._Foodname != value))
				{
					this.OnFoodnameChanging(value);
					this.SendPropertyChanging();
					this._Foodname = value;
					this.SendPropertyChanged("Foodname");
					this.OnFoodnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_Item_Member_Allergen", Storage="_Member_Allergens", ThisKey="Foodname", OtherKey="Foodname")]
		public EntitySet<Member_Allergen> Member_Allergens
		{
			get
			{
				return this._Member_Allergens;
			}
			set
			{
				this._Member_Allergens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_Item_Member_Allergen1", Storage="_Member_Allergens1", ThisKey="Foodname", OtherKey="Substitution")]
		public EntitySet<Member_Allergen> Member_Allergens1
		{
			get
			{
				return this._Member_Allergens1;
			}
			set
			{
				this._Member_Allergens1.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_Item_Task_Food_Item", Storage="_Task_Food_Items", ThisKey="Foodname", OtherKey="Foodname")]
		public EntitySet<Task_Food_Item> Task_Food_Items
		{
			get
			{
				return this._Task_Food_Items;
			}
			set
			{
				this._Task_Food_Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Member_Allergens(Member_Allergen entity)
		{
			this.SendPropertyChanging();
			entity.Food_Item = this;
		}
		
		private void detach_Member_Allergens(Member_Allergen entity)
		{
			this.SendPropertyChanging();
			entity.Food_Item = null;
		}
		
		private void attach_Member_Allergens1(Member_Allergen entity)
		{
			this.SendPropertyChanging();
			entity.Food_Item1 = this;
		}
		
		private void detach_Member_Allergens1(Member_Allergen entity)
		{
			this.SendPropertyChanging();
			entity.Food_Item1 = null;
		}
		
		private void attach_Task_Food_Items(Task_Food_Item entity)
		{
			this.SendPropertyChanging();
			entity.Food_Item = this;
		}
		
		private void detach_Task_Food_Items(Task_Food_Item entity)
		{
			this.SendPropertyChanging();
			entity.Food_Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Member")]
	public partial class Member : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Memname;
		
		private string _Mempass;
		
		private EntitySet<Agenda> _Agendas;
		
		private EntitySet<Member_Allergen> _Member_Allergens;
		
		private EntitySet<Member_Group> _Member_Groups;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemnameChanging(string value);
    partial void OnMemnameChanged();
    partial void OnMempassChanging(string value);
    partial void OnMempassChanged();
    #endregion
		
		public Member()
		{
			this._Agendas = new EntitySet<Agenda>(new Action<Agenda>(this.attach_Agendas), new Action<Agenda>(this.detach_Agendas));
			this._Member_Allergens = new EntitySet<Member_Allergen>(new Action<Member_Allergen>(this.attach_Member_Allergens), new Action<Member_Allergen>(this.detach_Member_Allergens));
			this._Member_Groups = new EntitySet<Member_Group>(new Action<Member_Group>(this.attach_Member_Groups), new Action<Member_Group>(this.detach_Member_Groups));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Memname", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Memname
		{
			get
			{
				return this._Memname;
			}
			set
			{
				if ((this._Memname != value))
				{
					this.OnMemnameChanging(value);
					this.SendPropertyChanging();
					this._Memname = value;
					this.SendPropertyChanged("Memname");
					this.OnMemnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Mempass", DbType="VarChar(255)")]
		public string Mempass
		{
			get
			{
				return this._Mempass;
			}
			set
			{
				if ((this._Mempass != value))
				{
					this.OnMempassChanging(value);
					this.SendPropertyChanging();
					this._Mempass = value;
					this.SendPropertyChanged("Mempass");
					this.OnMempassChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Agenda", Storage="_Agendas", ThisKey="Memname", OtherKey="Agowner")]
		public EntitySet<Agenda> Agendas
		{
			get
			{
				return this._Agendas;
			}
			set
			{
				this._Agendas.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Member_Allergen", Storage="_Member_Allergens", ThisKey="Memname", OtherKey="Memname")]
		public EntitySet<Member_Allergen> Member_Allergens
		{
			get
			{
				return this._Member_Allergens;
			}
			set
			{
				this._Member_Allergens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Member_Group", Storage="_Member_Groups", ThisKey="Memname", OtherKey="Groupadmin")]
		public EntitySet<Member_Group> Member_Groups
		{
			get
			{
				return this._Member_Groups;
			}
			set
			{
				this._Member_Groups.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Agendas(Agenda entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Agendas(Agenda entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_Member_Allergens(Member_Allergen entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Member_Allergens(Member_Allergen entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
		
		private void attach_Member_Groups(Member_Group entity)
		{
			this.SendPropertyChanging();
			entity.Member = this;
		}
		
		private void detach_Member_Groups(Member_Group entity)
		{
			this.SendPropertyChanging();
			entity.Member = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Member_Allergens")]
	public partial class Member_Allergen : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Memname;
		
		private string _Foodname;
		
		private string _Substitution;
		
		private EntityRef<Food_Item> _Food_Item;
		
		private EntityRef<Member> _Member;
		
		private EntityRef<Food_Item> _Food_Item1;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMemnameChanging(string value);
    partial void OnMemnameChanged();
    partial void OnFoodnameChanging(string value);
    partial void OnFoodnameChanged();
    partial void OnSubstitutionChanging(string value);
    partial void OnSubstitutionChanged();
    #endregion
		
		public Member_Allergen()
		{
			this._Food_Item = default(EntityRef<Food_Item>);
			this._Member = default(EntityRef<Member>);
			this._Food_Item1 = default(EntityRef<Food_Item>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Memname", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Memname
		{
			get
			{
				return this._Memname;
			}
			set
			{
				if ((this._Memname != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMemnameChanging(value);
					this.SendPropertyChanging();
					this._Memname = value;
					this.SendPropertyChanged("Memname");
					this.OnMemnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Foodname", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Foodname
		{
			get
			{
				return this._Foodname;
			}
			set
			{
				if ((this._Foodname != value))
				{
					if (this._Food_Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFoodnameChanging(value);
					this.SendPropertyChanging();
					this._Foodname = value;
					this.SendPropertyChanged("Foodname");
					this.OnFoodnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Substitution", DbType="VarChar(50)")]
		public string Substitution
		{
			get
			{
				return this._Substitution;
			}
			set
			{
				if ((this._Substitution != value))
				{
					if (this._Food_Item1.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSubstitutionChanging(value);
					this.SendPropertyChanging();
					this._Substitution = value;
					this.SendPropertyChanged("Substitution");
					this.OnSubstitutionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_Item_Member_Allergen", Storage="_Food_Item", ThisKey="Foodname", OtherKey="Foodname", IsForeignKey=true)]
		public Food_Item Food_Item
		{
			get
			{
				return this._Food_Item.Entity;
			}
			set
			{
				Food_Item previousValue = this._Food_Item.Entity;
				if (((previousValue != value) 
							|| (this._Food_Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Food_Item.Entity = null;
						previousValue.Member_Allergens.Remove(this);
					}
					this._Food_Item.Entity = value;
					if ((value != null))
					{
						value.Member_Allergens.Add(this);
						this._Foodname = value.Foodname;
					}
					else
					{
						this._Foodname = default(string);
					}
					this.SendPropertyChanged("Food_Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Member_Allergen", Storage="_Member", ThisKey="Memname", OtherKey="Memname", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Member_Allergens.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Member_Allergens.Add(this);
						this._Memname = value.Memname;
					}
					else
					{
						this._Memname = default(string);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_Item_Member_Allergen1", Storage="_Food_Item1", ThisKey="Substitution", OtherKey="Foodname", IsForeignKey=true)]
		public Food_Item Food_Item1
		{
			get
			{
				return this._Food_Item1.Entity;
			}
			set
			{
				Food_Item previousValue = this._Food_Item1.Entity;
				if (((previousValue != value) 
							|| (this._Food_Item1.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Food_Item1.Entity = null;
						previousValue.Member_Allergens1.Remove(this);
					}
					this._Food_Item1.Entity = value;
					if ((value != null))
					{
						value.Member_Allergens1.Add(this);
						this._Substitution = value.Foodname;
					}
					else
					{
						this._Substitution = default(string);
					}
					this.SendPropertyChanged("Food_Item1");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Member_Group")]
	public partial class Member_Group : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Groupadmin;
		
		private string _Groupname;
		
		private EntitySet<Tool> _Tools;
		
		private EntitySet<Oven> _Ovens;
		
		private EntityRef<Member> _Member;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupadminChanging(string value);
    partial void OnGroupadminChanged();
    partial void OnGroupnameChanging(string value);
    partial void OnGroupnameChanged();
    #endregion
		
		public Member_Group()
		{
			this._Tools = new EntitySet<Tool>(new Action<Tool>(this.attach_Tools), new Action<Tool>(this.detach_Tools));
			this._Ovens = new EntitySet<Oven>(new Action<Oven>(this.attach_Ovens), new Action<Oven>(this.detach_Ovens));
			this._Member = default(EntityRef<Member>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Groupadmin", DbType="VarChar(30) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Groupadmin
		{
			get
			{
				return this._Groupadmin;
			}
			set
			{
				if ((this._Groupadmin != value))
				{
					if (this._Member.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupadminChanging(value);
					this.SendPropertyChanging();
					this._Groupadmin = value;
					this.SendPropertyChanged("Groupadmin");
					this.OnGroupadminChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Groupname", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Groupname
		{
			get
			{
				return this._Groupname;
			}
			set
			{
				if ((this._Groupname != value))
				{
					this.OnGroupnameChanging(value);
					this.SendPropertyChanging();
					this._Groupname = value;
					this.SendPropertyChanged("Groupname");
					this.OnGroupnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Group_Tool", Storage="_Tools", ThisKey="Groupname", OtherKey="Groupname")]
		public EntitySet<Tool> Tools
		{
			get
			{
				return this._Tools;
			}
			set
			{
				this._Tools.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Group_Oven", Storage="_Ovens", ThisKey="Groupname", OtherKey="Groupname")]
		public EntitySet<Oven> Ovens
		{
			get
			{
				return this._Ovens;
			}
			set
			{
				this._Ovens.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Member_Group", Storage="_Member", ThisKey="Groupadmin", OtherKey="Memname", IsForeignKey=true)]
		public Member Member
		{
			get
			{
				return this._Member.Entity;
			}
			set
			{
				Member previousValue = this._Member.Entity;
				if (((previousValue != value) 
							|| (this._Member.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member.Entity = null;
						previousValue.Member_Groups.Remove(this);
					}
					this._Member.Entity = value;
					if ((value != null))
					{
						value.Member_Groups.Add(this);
						this._Groupadmin = value.Memname;
					}
					else
					{
						this._Groupadmin = default(string);
					}
					this.SendPropertyChanged("Member");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Tools(Tool entity)
		{
			this.SendPropertyChanging();
			entity.Member_Group = this;
		}
		
		private void detach_Tools(Tool entity)
		{
			this.SendPropertyChanging();
			entity.Member_Group = null;
		}
		
		private void attach_Ovens(Oven entity)
		{
			this.SendPropertyChanging();
			entity.Member_Group = this;
		}
		
		private void detach_Ovens(Oven entity)
		{
			this.SendPropertyChanging();
			entity.Member_Group = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Oven")]
	public partial class Oven : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Toolname;
		
		private string _Groupname;
		
		private string _Ovenpwrtype;
		
		private System.Nullable<int> _Ovenburnnum;
		
		private EntityRef<Member_Group> _Member_Group;
		
		private EntityRef<Tool> _Tool;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnToolnameChanging(string value);
    partial void OnToolnameChanged();
    partial void OnGroupnameChanging(string value);
    partial void OnGroupnameChanged();
    partial void OnOvenpwrtypeChanging(string value);
    partial void OnOvenpwrtypeChanged();
    partial void OnOvenburnnumChanging(System.Nullable<int> value);
    partial void OnOvenburnnumChanged();
    #endregion
		
		public Oven()
		{
			this._Member_Group = default(EntityRef<Member_Group>);
			this._Tool = default(EntityRef<Tool>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Toolname", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Toolname
		{
			get
			{
				return this._Toolname;
			}
			set
			{
				if ((this._Toolname != value))
				{
					if (this._Tool.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnToolnameChanging(value);
					this.SendPropertyChanging();
					this._Toolname = value;
					this.SendPropertyChanged("Toolname");
					this.OnToolnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Groupname", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Groupname
		{
			get
			{
				return this._Groupname;
			}
			set
			{
				if ((this._Groupname != value))
				{
					if (this._Member_Group.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupnameChanging(value);
					this.SendPropertyChanging();
					this._Groupname = value;
					this.SendPropertyChanged("Groupname");
					this.OnGroupnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ovenpwrtype", DbType="VarChar(255)")]
		public string Ovenpwrtype
		{
			get
			{
				return this._Ovenpwrtype;
			}
			set
			{
				if ((this._Ovenpwrtype != value))
				{
					this.OnOvenpwrtypeChanging(value);
					this.SendPropertyChanging();
					this._Ovenpwrtype = value;
					this.SendPropertyChanged("Ovenpwrtype");
					this.OnOvenpwrtypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ovenburnnum", DbType="Int")]
		public System.Nullable<int> Ovenburnnum
		{
			get
			{
				return this._Ovenburnnum;
			}
			set
			{
				if ((this._Ovenburnnum != value))
				{
					this.OnOvenburnnumChanging(value);
					this.SendPropertyChanging();
					this._Ovenburnnum = value;
					this.SendPropertyChanged("Ovenburnnum");
					this.OnOvenburnnumChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Member_Group_Oven", Storage="_Member_Group", ThisKey="Groupname", OtherKey="Groupname", IsForeignKey=true)]
		public Member_Group Member_Group
		{
			get
			{
				return this._Member_Group.Entity;
			}
			set
			{
				Member_Group previousValue = this._Member_Group.Entity;
				if (((previousValue != value) 
							|| (this._Member_Group.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Member_Group.Entity = null;
						previousValue.Ovens.Remove(this);
					}
					this._Member_Group.Entity = value;
					if ((value != null))
					{
						value.Ovens.Add(this);
						this._Groupname = value.Groupname;
					}
					else
					{
						this._Groupname = default(string);
					}
					this.SendPropertyChanged("Member_Group");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tool_Oven", Storage="_Tool", ThisKey="Toolname", OtherKey="Toolname", IsForeignKey=true)]
		public Tool Tool
		{
			get
			{
				return this._Tool.Entity;
			}
			set
			{
				Tool previousValue = this._Tool.Entity;
				if (((previousValue != value) 
							|| (this._Tool.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tool.Entity = null;
						previousValue.Ovens.Remove(this);
					}
					this._Tool.Entity = value;
					if ((value != null))
					{
						value.Ovens.Add(this);
						this._Toolname = value.Toolname;
					}
					else
					{
						this._Toolname = default(string);
					}
					this.SendPropertyChanged("Tool");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Recipe")]
	public partial class Recipe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Recid;
		
		private string _Recname;
		
		private string _Recdesc;
		
		private EntitySet<Agenda_Recipe> _Agenda_Recipes;
		
		private EntitySet<Recipe_Task> _Recipe_Tasks;
		
		private EntitySet<Task> _Tasks;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecidChanging(int value);
    partial void OnRecidChanged();
    partial void OnRecnameChanging(string value);
    partial void OnRecnameChanged();
    partial void OnRecdescChanging(string value);
    partial void OnRecdescChanged();
    #endregion
		
		public Recipe()
		{
			this._Agenda_Recipes = new EntitySet<Agenda_Recipe>(new Action<Agenda_Recipe>(this.attach_Agenda_Recipes), new Action<Agenda_Recipe>(this.detach_Agenda_Recipes));
			this._Recipe_Tasks = new EntitySet<Recipe_Task>(new Action<Recipe_Task>(this.attach_Recipe_Tasks), new Action<Recipe_Task>(this.detach_Recipe_Tasks));
			this._Tasks = new EntitySet<Task>(new Action<Task>(this.attach_Tasks), new Action<Task>(this.detach_Tasks));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Recid
		{
			get
			{
				return this._Recid;
			}
			set
			{
				if ((this._Recid != value))
				{
					this.OnRecidChanging(value);
					this.SendPropertyChanging();
					this._Recid = value;
					this.SendPropertyChanged("Recid");
					this.OnRecidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recname", DbType="VarChar(255)")]
		public string Recname
		{
			get
			{
				return this._Recname;
			}
			set
			{
				if ((this._Recname != value))
				{
					this.OnRecnameChanging(value);
					this.SendPropertyChanging();
					this._Recname = value;
					this.SendPropertyChanged("Recname");
					this.OnRecnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recdesc", DbType="VarChar(255)")]
		public string Recdesc
		{
			get
			{
				return this._Recdesc;
			}
			set
			{
				if ((this._Recdesc != value))
				{
					this.OnRecdescChanging(value);
					this.SendPropertyChanging();
					this._Recdesc = value;
					this.SendPropertyChanged("Recdesc");
					this.OnRecdescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recipe_Agenda_Recipe", Storage="_Agenda_Recipes", ThisKey="Recid", OtherKey="Recid")]
		public EntitySet<Agenda_Recipe> Agenda_Recipes
		{
			get
			{
				return this._Agenda_Recipes;
			}
			set
			{
				this._Agenda_Recipes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recipe_Recipe_Task", Storage="_Recipe_Tasks", ThisKey="Recid", OtherKey="Recid")]
		public EntitySet<Recipe_Task> Recipe_Tasks
		{
			get
			{
				return this._Recipe_Tasks;
			}
			set
			{
				this._Recipe_Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recipe_Task", Storage="_Tasks", ThisKey="Recid", OtherKey="Taskrec")]
		public EntitySet<Task> Tasks
		{
			get
			{
				return this._Tasks;
			}
			set
			{
				this._Tasks.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Agenda_Recipes(Agenda_Recipe entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = this;
		}
		
		private void detach_Agenda_Recipes(Agenda_Recipe entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = null;
		}
		
		private void attach_Recipe_Tasks(Recipe_Task entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = this;
		}
		
		private void detach_Recipe_Tasks(Recipe_Task entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = null;
		}
		
		private void attach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = this;
		}
		
		private void detach_Tasks(Task entity)
		{
			this.SendPropertyChanging();
			entity.Recipe = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Recipe_Tasks")]
	public partial class Recipe_Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Recid;
		
		private int _Taskid;
		
		private EntityRef<Recipe> _Recipe;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRecidChanging(int value);
    partial void OnRecidChanged();
    partial void OnTaskidChanging(int value);
    partial void OnTaskidChanged();
    #endregion
		
		public Recipe_Task()
		{
			this._Recipe = default(EntityRef<Recipe>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Recid
		{
			get
			{
				return this._Recid;
			}
			set
			{
				if ((this._Recid != value))
				{
					if (this._Recipe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRecidChanging(value);
					this.SendPropertyChanging();
					this._Recid = value;
					this.SendPropertyChanged("Recid");
					this.OnRecidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Taskid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Taskid
		{
			get
			{
				return this._Taskid;
			}
			set
			{
				if ((this._Taskid != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskidChanging(value);
					this.SendPropertyChanging();
					this._Taskid = value;
					this.SendPropertyChanged("Taskid");
					this.OnTaskidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recipe_Recipe_Task", Storage="_Recipe", ThisKey="Recid", OtherKey="Recid", IsForeignKey=true)]
		public Recipe Recipe
		{
			get
			{
				return this._Recipe.Entity;
			}
			set
			{
				Recipe previousValue = this._Recipe.Entity;
				if (((previousValue != value) 
							|| (this._Recipe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Recipe.Entity = null;
						previousValue.Recipe_Tasks.Remove(this);
					}
					this._Recipe.Entity = value;
					if ((value != null))
					{
						value.Recipe_Tasks.Add(this);
						this._Recid = value.Recid;
					}
					else
					{
						this._Recid = default(int);
					}
					this.SendPropertyChanged("Recipe");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_Recipe_Task", Storage="_Task", ThisKey="Taskid", OtherKey="Taskid", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.Recipe_Tasks.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.Recipe_Tasks.Add(this);
						this._Taskid = value.Taskid;
					}
					else
					{
						this._Taskid = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Task")]
	public partial class Task : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private System.Nullable<int> _Taskrec;
		
		private int _Taskid;
		
		private string _Taskname;
		
		private string _Taskdesc;
		
		private System.Nullable<int> _Tasktime;
		
		private EntitySet<Recipe_Task> _Recipe_Tasks;
		
		private EntitySet<Task_Food_Item> _Task_Food_Items;
		
		private EntityRef<Recipe> _Recipe;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskrecChanging(System.Nullable<int> value);
    partial void OnTaskrecChanged();
    partial void OnTaskidChanging(int value);
    partial void OnTaskidChanged();
    partial void OnTasknameChanging(string value);
    partial void OnTasknameChanged();
    partial void OnTaskdescChanging(string value);
    partial void OnTaskdescChanged();
    partial void OnTasktimeChanging(System.Nullable<int> value);
    partial void OnTasktimeChanged();
    #endregion
		
		public Task()
		{
			this._Recipe_Tasks = new EntitySet<Recipe_Task>(new Action<Recipe_Task>(this.attach_Recipe_Tasks), new Action<Recipe_Task>(this.detach_Recipe_Tasks));
			this._Task_Food_Items = new EntitySet<Task_Food_Item>(new Action<Task_Food_Item>(this.attach_Task_Food_Items), new Action<Task_Food_Item>(this.detach_Task_Food_Items));
			this._Recipe = default(EntityRef<Recipe>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Taskrec", DbType="Int")]
		public System.Nullable<int> Taskrec
		{
			get
			{
				return this._Taskrec;
			}
			set
			{
				if ((this._Taskrec != value))
				{
					if (this._Recipe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskrecChanging(value);
					this.SendPropertyChanging();
					this._Taskrec = value;
					this.SendPropertyChanged("Taskrec");
					this.OnTaskrecChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Taskid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Taskid
		{
			get
			{
				return this._Taskid;
			}
			set
			{
				if ((this._Taskid != value))
				{
					this.OnTaskidChanging(value);
					this.SendPropertyChanging();
					this._Taskid = value;
					this.SendPropertyChanged("Taskid");
					this.OnTaskidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Taskname", DbType="VarChar(50)")]
		public string Taskname
		{
			get
			{
				return this._Taskname;
			}
			set
			{
				if ((this._Taskname != value))
				{
					this.OnTasknameChanging(value);
					this.SendPropertyChanging();
					this._Taskname = value;
					this.SendPropertyChanged("Taskname");
					this.OnTasknameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Taskdesc", DbType="VarChar(255)")]
		public string Taskdesc
		{
			get
			{
				return this._Taskdesc;
			}
			set
			{
				if ((this._Taskdesc != value))
				{
					this.OnTaskdescChanging(value);
					this.SendPropertyChanging();
					this._Taskdesc = value;
					this.SendPropertyChanged("Taskdesc");
					this.OnTaskdescChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Tasktime", DbType="Int")]
		public System.Nullable<int> Tasktime
		{
			get
			{
				return this._Tasktime;
			}
			set
			{
				if ((this._Tasktime != value))
				{
					this.OnTasktimeChanging(value);
					this.SendPropertyChanging();
					this._Tasktime = value;
					this.SendPropertyChanged("Tasktime");
					this.OnTasktimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_Recipe_Task", Storage="_Recipe_Tasks", ThisKey="Taskid", OtherKey="Taskid")]
		public EntitySet<Recipe_Task> Recipe_Tasks
		{
			get
			{
				return this._Recipe_Tasks;
			}
			set
			{
				this._Recipe_Tasks.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_Task_Food_Item", Storage="_Task_Food_Items", ThisKey="Taskid", OtherKey="Taskid")]
		public EntitySet<Task_Food_Item> Task_Food_Items
		{
			get
			{
				return this._Task_Food_Items;
			}
			set
			{
				this._Task_Food_Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Recipe_Task", Storage="_Recipe", ThisKey="Taskrec", OtherKey="Recid", IsForeignKey=true)]
		public Recipe Recipe
		{
			get
			{
				return this._Recipe.Entity;
			}
			set
			{
				Recipe previousValue = this._Recipe.Entity;
				if (((previousValue != value) 
							|| (this._Recipe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Recipe.Entity = null;
						previousValue.Tasks.Remove(this);
					}
					this._Recipe.Entity = value;
					if ((value != null))
					{
						value.Tasks.Add(this);
						this._Taskrec = value.Recid;
					}
					else
					{
						this._Taskrec = default(Nullable<int>);
					}
					this.SendPropertyChanged("Recipe");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Recipe_Tasks(Recipe_Task entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_Recipe_Tasks(Recipe_Task entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
		
		private void attach_Task_Food_Items(Task_Food_Item entity)
		{
			this.SendPropertyChanging();
			entity.Task = this;
		}
		
		private void detach_Task_Food_Items(Task_Food_Item entity)
		{
			this.SendPropertyChanging();
			entity.Task = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Task_Food_Items")]
	public partial class Task_Food_Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Taskid;
		
		private string _Foodname;
		
		private EntityRef<Food_Item> _Food_Item;
		
		private EntityRef<Task> _Task;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnTaskidChanging(int value);
    partial void OnTaskidChanged();
    partial void OnFoodnameChanging(string value);
    partial void OnFoodnameChanged();
    #endregion
		
		public Task_Food_Item()
		{
			this._Food_Item = default(EntityRef<Food_Item>);
			this._Task = default(EntityRef<Task>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Taskid", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Taskid
		{
			get
			{
				return this._Taskid;
			}
			set
			{
				if ((this._Taskid != value))
				{
					if (this._Task.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTaskidChanging(value);
					this.SendPropertyChanging();
					this._Taskid = value;
					this.SendPropertyChanged("Taskid");
					this.OnTaskidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Foodname", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Foodname
		{
			get
			{
				return this._Foodname;
			}
			set
			{
				if ((this._Foodname != value))
				{
					if (this._Food_Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFoodnameChanging(value);
					this.SendPropertyChanging();
					this._Foodname = value;
					this.SendPropertyChanged("Foodname");
					this.OnFoodnameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Food_Item_Task_Food_Item", Storage="_Food_Item", ThisKey="Foodname", OtherKey="Foodname", IsForeignKey=true)]
		public Food_Item Food_Item
		{
			get
			{
				return this._Food_Item.Entity;
			}
			set
			{
				Food_Item previousValue = this._Food_Item.Entity;
				if (((previousValue != value) 
							|| (this._Food_Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Food_Item.Entity = null;
						previousValue.Task_Food_Items.Remove(this);
					}
					this._Food_Item.Entity = value;
					if ((value != null))
					{
						value.Task_Food_Items.Add(this);
						this._Foodname = value.Foodname;
					}
					else
					{
						this._Foodname = default(string);
					}
					this.SendPropertyChanged("Food_Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Task_Task_Food_Item", Storage="_Task", ThisKey="Taskid", OtherKey="Taskid", IsForeignKey=true)]
		public Task Task
		{
			get
			{
				return this._Task.Entity;
			}
			set
			{
				Task previousValue = this._Task.Entity;
				if (((previousValue != value) 
							|| (this._Task.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Task.Entity = null;
						previousValue.Task_Food_Items.Remove(this);
					}
					this._Task.Entity = value;
					if ((value != null))
					{
						value.Task_Food_Items.Add(this);
						this._Taskid = value.Taskid;
					}
					else
					{
						this._Taskid = default(int);
					}
					this.SendPropertyChanged("Task");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
